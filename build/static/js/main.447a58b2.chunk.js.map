{"version":3,"sources":["Spellbook.jsx","Slider.jsx","App.js","serviceWorker.js","index.js"],"names":["Spellbook","props","castingTime","data","casting_time","concentration","duration","index","level","material","name","range","ritual","bookView","openBook","pageRight","pageLeft","console","log","className","onClick","Slider","getLeftItem","setState","state","getRightItem","items","length","toggleView","e","dir","target","parentElement","classList","toggle","this","Component","App","getPaths","results","fetch","then","result","json","i","count","push","urls","map","url","Promise","all","spells","catch","error","resultsIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.447a58b2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Spellbook.css\";\n\nfunction Spellbook(props) {\n  let castingTime = props.data.casting_time;\n  let concentration = props.data.concentration;\n  let duration = props.data.duration;\n  let index = props.data.index;\n  let level = props.data.level;\n  let material = props.data.material;\n  let name = props.data.name;\n  let range = props.data.range;\n  let ritual = props.data.ritual;\n  let bookView = props.bookView;\n  let openBook = props.openBook;\n  let pageRight = props.pageRight;\n  let pageLeft = props.pageLeft;\n  console.log(bookView);\n  console.log(props);\n\n  return (\n    <div className=\"flex-center spellbook-wrapper\">\n      <h1 className={bookView ? \"hidden\" : \"\"}>Book of Spells</h1>\n      <div className={bookView ? \"book\" : \"\"}>\n        <div className={bookView ? \"back\" : \"\"} onClick={openBook}></div>\n        <div onClick={pageRight} className={bookView ? \"page6\" : \"\"}>\n          <h1 onClick={openBook}>{name}</h1>\n          <section className={bookView ? \"\" : \"info-box\"}>\n            <p>\n              <span>castingTime: </span> {castingTime}{\" \"}\n            </p>\n            <p>\n              <span>concentration: </span> {concentration}{\" \"}\n            </p>\n            <p>\n              <span>duration: </span> {duration}{\" \"}\n            </p>\n            <p>\n              <span>index: </span> {index}{\" \"}\n            </p>\n            <p>\n              <span>level: </span> {level}{\" \"}\n            </p>\n            <p>\n              <span>material: </span> {material}{\" \"}\n            </p>\n            <p>\n              <span>range: </span> {range}{\" \"}\n            </p>\n            <p>\n              <span>ritual: </span> {ritual}{\" \"}\n            </p>\n            <footer>{props.index}</footer>\n          </section>\n        </div>\n        <div onClick={pageLeft} className={bookView ? \"page5\" : \"\"}></div>\n        <div onClick={pageRight} className={bookView ? \"page4\" : \"\"}></div>\n        <div onClick={pageLeft} className={bookView ? \"page3\" : \"\"}></div>\n        <div onClick={pageRight} className={bookView ? \"page2\" : \"\"}></div>\n        <div onClick={pageLeft} className={bookView ? \"page1\" : \"\"}></div>\n        <div className={bookView ? \"front\" : \"\"} onClick={openBook}>\n          <h1 className={bookView ? \"\" : \"hidden\"}>Book of Spells</h1>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Spellbook;\n\n// Original css design by https://codepen.io/dhanishgajjar/pen/bjaYYo\n","import React, { Component } from \"react\";\nimport SliderBtn from \"./SliderBtn\";\nimport \"./Slider.css\";\nimport Spellbook from \"./Spellbook.jsx\";\n\nclass Slider extends Component {\n  constructor() {\n    super();\n    this.state = {\n      index: 0,\n      bookView: true,\n    };\n  }\n\n  getLeftItem = () =>\n    this.setState({\n      index: this.state.index ? this.state.index - 1 : this.state.index,\n    });\n\n  getRightItem = () =>\n    this.setState({\n      index:\n        this.props.items.length > 1 ? this.state.index + 1 : this.state.index,\n    });\n\n  toggleView = () => {\n    this.state.bookView\n      ? this.setState({ bookView: false })\n      : this.setState({ bookView: true });\n  };\n\n  openBook = (e) => {\n    console.dir(e.target);\n    e.target.parentElement.classList.toggle(\"book-open\");\n  };\n\n  render() {\n    return (\n      <main className=\"flex-center Slider-main\">\n        {/* <div className=\"btn-box\">\n          <SliderBtn\n            func={this.getLeftItem}\n            i={this.state.index}\n            max={this.props.items ? this.props.items.length - 1 : 0}\n            direction=\"<\"\n          />\n\n          <button className=\"btn\" onClick={this.toggleView}>\n            Change View\n          </button> \n\n          <SliderBtn\n            func={this.getRightItem}\n            i={this.state.index}\n            max={this.props.items ? this.props.items.length - 1 : 0}\n            direction=\">\"\n          />\n        </div>*/}\n        <div className={`spellbook-container ${this.state.bookView}`}>\n          <Spellbook\n            data={\n              this.props.items[this.state.index]\n                ? this.props.items[this.state.index]\n                : \"\"\n            }\n            openBook={this.openBook}\n            bookView={this.state.bookView}\n            pageRight={this.getRightItem}\n            pageLeft={this.getLeftItem}\n            index={this.state.index}\n          />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Slider;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Slider from \"./Slider\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      results: [],\n      resultsIndex: -1,\n      count: 319,\n      spells: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getPaths();\n  }\n  //https://stackoverflow.com/questions/31710768/how-can-i-fetch-an-array-of-urls-with-promise-all\n  //http://joelabrahamsson.com/quickly-mapping-an-array-of-urls-to-responses-with-javascript-asyncawait-and-promiseall/\n\n  getPaths = () => {\n    let url = \"https://www.dnd5eapi.co/api/spells\";\n    let results = this.state.results;\n\n    fetch(url)\n      .then((result) => result.json())\n      .then((data) => {\n        for (let i = 0; i < this.state.count; i = i + 9) {\n          //get random\n          results.push(data.results[i]);\n        }\n        return results;\n      })\n      .then((results) => {\n        let urls = results.map(\n          (result) => `https://www.dnd5eapi.co${result.url}`\n        );\n\n        Promise.all(\n          urls.map((url) => fetch(url).then((result) => result.json()))\n        ).then((data) => {\n          // console.log(data);\n          this.setState({ spells: data });\n        });\n      })\n      .catch((error) => console.log(\"Error\", error));\n  };\n\n  render() {\n    // console.log(this.state.spells);\n    return <Slider items={this.state.spells} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}